/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* make command to search for the srcs */
Pkg.makePrologue = "vpath %.c ../../src "
  + "../../adapters ";

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

var SRCS = [
    "prov_auth_client.c",
    "prov_security_factory.c",
    "iothub_auth_client.c",
    "iothub_security_factory.c",
    "hsm_client_data.c",
    "custom_hsm_tirtos.c",
    "prov_device_client.c",
    "prov_device_ll_client.c",
    "prov_transport_http_client.c",
    "prov_transport_amqp_client.c",
    "prov_transport_amqp_common.c",
    "prov_sasl_tpm.c",
    "prov_transport_mqtt_client.c",
    "prov_transport_mqtt_common.c"
];

var PPDS = "-DNO_LOGGING -DUSE_PROV_MODULE -DHSM_AUTH_TYPE_CUSTOM ";

/* Paths to external source libraries */
xdcargs = java.lang.System.getenv("XDCARGS").split(" ");

var slIncs = "";
var ndkIncs = "";
var wolfsslIncs = "";
var provClientIncs = "-I../../inc "
  +"-I../../adapters "
  +"-I../../deps/RIoT/Emulator/DICE "
  +"-I../../deps/RIoT/Emulator/RIoT "
  +"-I../../deps/RIoT/Emulator/RIoT/RIoTCrypt/include "
  +"-I../../../c-utility/pal/linux "
  +"-I../../../c-utility/inc "
	+"-I../../../deps/parson "
  +"-I../../../uamqp/inc "
  +"-I../../../umqtt/inc "
  +"-I../../../deps/uhttp/inc ";
var pthreadIncs = "";
var cgtIncs = "";
/*

*/
/* Parse out the XDCARGS options for the library source paths */
for (x = 0; x < xdcargs.length; x++) {
    if (xdcargs[x].match(/^ti.targets.arm.elf.M4=/)) {
        cgtIncs = (xdcargs[x] + "").replace(/'/g, '');
        cgtIncs = cgtIncs.substring(cgtIncs.indexOf('=') + 1);
        if (cgtIncs != "") {
            cgtIncs = "-I" + cgtIncs + "/include ";
        }
    }

    if (xdcargs[x].match(/^CC32XXSDK=/)) {
        slIncs = (xdcargs[x] + "").replace(/'/g, '');
        slIncs = slIncs.substring(slIncs.indexOf('=') + 1);
        if (slIncs != "") {
            slIncs += "/source";
            slIncs = "-I" + slIncs + " -I" + slIncs + "/include " + " -I" + slIncs + "/ti/drivers/net/wifi/bsd ";
        }
    }

    if (xdcargs[x].match(/^NDK=/)) {
        ndkIncs = (xdcargs[x] + "").replace(/'/g, '');
        ndkIncs = ndkIncs.substring(ndkIncs.indexOf('=') + 1);
        if (ndkIncs != "") {
            ndkIncs = "-I" + ndkIncs + "/packages/ti/ndk/inc/bsd ";
        }
    }

    if (xdcargs[x].match(/^BIOS=/)) {
        pthreadIncs = (xdcargs[x] + "").replace(/'/g, '');
        pthreadIncs = pthreadIncs.substring(pthreadIncs.indexOf('=') + 1);
        if (pthreadIncs != "") {
            pthreadIncs = "-I" + pthreadIncs + "/packages/ti/sysbios/posix ";
        }
    }

    if (xdcargs[x].match(/^WOLFSSL=/)) {
        wolfsslIncs = (xdcargs[x] + "").replace(/'/g, '');
        wolfsslIncs = wolfsslIncs.substring(wolfsslIncs.indexOf('=') + 1);
        if (wolfsslIncs != "") {
            wolfsslIncs = "-I" + wolfsslIncs;
        }
    }
}

if (ndkIncs != "") {

    if (wolfsslIncs == "") {
        print("Warning: Cannot find WolfSSL directory: '" + wolfsslPath
                + "'. Skipping TLS support build.");
        wolfsslIncs = "";
    }

    var wolfsslPath = wolfsslIncs.substring(2);
    try {
        var f = new java.io.File(wolfsslPath);
        if (!f.exists()) {
            print("Warning: Cannot find WolfSSL directory: '" + wolfsslPath
                    + "'. Skipping TLS support build.");
            wolfsslIncs = "";
        }
    }
    catch(e) {
        print("Warning: Cannot find WolfSSL directory: '" + wolfsslPath
                + "'. Skipping TLS support build.");
        wolfsslIncs = "";
    }
}

for (var i = 0; i < Build.targets.length; i++) {
    var profile = "release";
    var target = Build.targets[i];
    var extraOpts = provClientIncs + cgtIncs + pthreadIncs;

    if (slIncs != "") {
        Pkg.addLibrary("lib/provisioning_client_sl", target, { profile: profile,
            defs: "-DNET_SL -DREFCOUNT_ATOMIC_DONTCARE " + PPDS + extraOpts,
            incs: slIncs
        }).addObjects(SRCS);
    }

    if (ndkIncs != "") {
        if (wolfsslIncs != "") {
             Pkg.addLibrary("lib/provisioning_client_ndk_wolfssl", target, {
                profile: profile,
                defs: "-DNET_NDK -DNET_WOLFSSL -DWOLFSSL_TIRTOS " + PPDS + extraOpts,
                incs: ndkIncs + wolfsslIncs
            }).addObjects(SRCS)
        }

        Pkg.addLibrary("lib/provisioning_client_ndk", target, { profile: profile,
            defs: "-DNET_NDK " + PPDS + extraOpts,
            incs: ndkIncs
        }).addObjects(SRCS);
    }
}
